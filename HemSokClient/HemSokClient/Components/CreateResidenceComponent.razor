@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient httpclient

@page "/createresidence"
<h3>Fill out the neccesary information to create the residence to be created</h3>


<EditForm Model="@residence" OnValidSubmit="HandleFormSubmit">
<DataAnnotationsValidator></DataAnnotationsValidator>
<ValidationSummary></ValidationSummary>
<label for="StreetName">Address: </label>
<InputText id="StreetName" @bind-Value="@residence.StreetName"></InputText>
<br />
<label for="City">Stad: </label>
<InputText id="City" @bind-Value="@residence.City"></InputText>
<br />
<label for="ZipCode">Post Nummer: </label>
<InputText id="ZipCode" @bind-Value="@residence.ZipCode"></InputText>
    <br />
<label for="ListingPrice">Utgångspris: </label>
 <InputNumber id="ListingPrice" @bind-Value="@residence.ListingPrice"></InputNumber>
    <br />
<label>Välj Kategori: </label>
<InputSelect @bind-Value="CategoryId">
    @foreach (var c in Categories)
        {<option value="@c.Id">@c.Name</option>}
</InputSelect>
    <br />
    <label>Välj Mäklare: </label>
    <InputSelect @bind-Value="AgentId">
        @foreach (var c in Agents)
        {<option value="@c.Id">@c.FirstName @c.LastName</option>}
    </InputSelect>
    <br />
    <label>Välj Kommun: </label>
    <InputSelect @bind-Value="MunicipalityId">
        @foreach (var c in Municipalities)
        {<option value="@c.Id">@c.Name</option>}
    </InputSelect>
<button type="submit">Submit</button>

</EditForm>

@if(OK != null)
{
    <p>@OK</p>
}




@code {

    public Residence residence = new();
    List<Category> Categories = new();
    public int CategoryId{ get; set; }
    List<Agent> Agents = new();
    public string AgentId { get; set; }
    List<Municipality> Municipalities = new();
    public int MunicipalityId { get; set; }
    public string OK { get; set; }

    private async Task HandleFormSubmit(EditContext context)
    {
        residence.City = ((Residence)context.Model).City;
        ResidenceDTO res1 = new();    
        res1.Agent = Agents.FirstOrDefault(s=>s.Id == AgentId);           
        res1.Category  = Categories.FirstOrDefault(s=>s.Id == CategoryId);         
        res1.Municipality = Municipalities.FirstOrDefault(s=>s.Id == MunicipalityId);
       
        res1.StreetName = ((Residence)context.Model).StreetName;
        res1.City = ((Residence)context.Model).City;
        res1.ZipCode = ((Residence)context.Model).ZipCode;
        res1.ListingPrice = ((Residence)context.Model).ListingPrice;
        // HttpContent content = new StringContent(JsonSerializer.Serialize(res1), Encoding.UTF8, "application/json");
        // var post = await httpclient.PostAsync("/api/residence", content);
        var post = await httpclient.PostAsJsonAsync("api/residence",res1);
        Console.WriteLine("stop");
        Console.ReadKey();
        OK = $"du kom ner hit ";
        
    }

    protected override async Task OnInitializedAsync()
    {      

        var response = await httpclient.GetAsync("api/Category");
        if (response.IsSuccessStatusCode)
        {
           Categories  = await response.Content.ReadFromJsonAsync<List<Category>>();
        }
        else { Categories = null; }

        response = await httpclient.GetAsync("api/Agent");
        if (response.IsSuccessStatusCode)
        {
            Agents = await response.Content.ReadFromJsonAsync<List<Agent>>();
        }
        else { Agents = null; }

        response = await httpclient.GetAsync("api/Municipality");
        if (response.IsSuccessStatusCode)
        {
            Municipalities = await response.Content.ReadFromJsonAsync<List<Municipality>>();
        }
        else { Municipalities = null; }
    }

  
}
