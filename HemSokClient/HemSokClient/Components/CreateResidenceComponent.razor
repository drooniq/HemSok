@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient httpclient
@inject NavigationManager navigationManager

@* Author: Marcus Karlsson*@

@page "/createresidence"
<h3>Fyll i nyckel informationen</h3>


<EditForm Model="@residence" OnValidSubmit="HandleFormSubmit">
<DataAnnotationsValidator></DataAnnotationsValidator>
<ValidationSummary></ValidationSummary>
<label for="StreetName">Address: </label>
<InputText id="StreetName" @bind-Value="@residence.StreetName"></InputText>
<br />
<label for="City">Stad: </label>
<InputText id="City" @bind-Value="@residence.City"></InputText>
<br />
<label for="ZipCode">Post Nummer: </label>
<InputText id="ZipCode" @bind-Value="@residence.ZipCode"></InputText>
    <br />
<label for="ListingPrice">Utgångspris: </label>
 <InputNumber id="ListingPrice" @bind-Value="@residence.ListingPrice"></InputNumber>
    <br />
<label>Välj Kategori: </label>
<InputSelect @bind-Value="CategoryId">       
    @foreach (var c in Categories)
        {<option value="@c.Id">@c.Name</option>}
</InputSelect>
    <br />
    <label>Välj Mäklare: </label>
    <InputSelect @bind-Value="AgentId">       
        @foreach (var c in Agents)
        {<option value="@c.Id">@c.FirstName @c.LastName</option>}
    </InputSelect>
    <br />
    <label>Välj Kommun: </label>
    <InputSelect @bind-Value="MunicipalityId">       
        @foreach (var c in Municipalities)
        {<option value="@c.Id">@c.Name</option>}
    </InputSelect>
<button type="submit">Submit</button>

</EditForm>

@if(OK != null)
{
    <p>@OK</p>
}




@code {

    public Residence residence = new();
    List<Category> Categories = new();
    public int CategoryId{ get; set; }
    List<Agent> Agents = new();
    public string AgentId { get; set; }
    List<Municipality> Municipalities = new();
    public int MunicipalityId { get; set; }
    public string OK { get; set; }
   

    private async Task HandleFormSubmit(EditContext context)
    {              
        residence.Agent = Agents.FirstOrDefault(s => s.Id == AgentId);
        residence.Category = Categories.FirstOrDefault(s => s.Id == CategoryId);
        residence.Municipality = Municipalities.FirstOrDefault(s => s.Id == MunicipalityId);

        var post = await httpclient.PostAsJsonAsync("api/Residence", residence);
        if (post.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/residence");
        }
        else
        {     
           
        }
        
        //Redirecta till edit sida, för att fylla ut fullständig information!
    }

    protected override async Task OnInitializedAsync()
    {      
        var response = await httpclient.GetAsync("api/Category");
        if (response.IsSuccessStatusCode)
        {
            Categories  = await response.Content.ReadFromJsonAsync<List<Category>>();
            CategoryId = Categories[0].Id;
        }
        else { Categories = null; }

        response = await httpclient.GetAsync("api/Agent");
        if (response.IsSuccessStatusCode)
        {
            Agents = await response.Content.ReadFromJsonAsync<List<Agent>>();
            AgentId = Agents[0].Id;
        }
        else { Agents = null; }

        response = await httpclient.GetAsync("api/Municipality");
        if (response.IsSuccessStatusCode)
        {
            Municipalities = await response.Content.ReadFromJsonAsync<List<Municipality>>();
            MunicipalityId = Municipalities[0].Id;
        }
        else { Municipalities = null; }
    }

  
}
