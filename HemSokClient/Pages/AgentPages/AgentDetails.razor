@page "/detailsagent/{id}"
@inject IJSRuntime JSRuntime
@inject INavigationStateService NavigationStateService
@inject IAPIService apiService
@inject IAuthStateService AuthStateService

@* Author: Fredrik Blixt*@
<PageTitle>Agent Details</PageTitle>
@if (Agent != null)
{
    <div class="containerCenter" style="flex-direction: row">
        @if (Agent != null && Residences != null)
        {
            <AgentCardComponent Agent="Agent" Residences="Residences" />
        }
        else
        {
            <ErrorMessage Message="Mäklaren kunde inte hittas" />
        }
    </div>
    <div class="containerCenter" style="flex-direction: row">
        <button class="btn btn-primary btn-sm m-3 " @onclick="@(() => NavigationStateService.NavigateTo("/agent"))">Gå Tillbaka</button>
        @if (AuthStateService.IsLoggedIn() && AuthStateService?.currentUser?.AgentId == Agent?.Id || AuthStateService.IsSuperAdmin())
        {
            <button class="btn btn-primary btn-sm mt-3 mb-3 me-1" @onclick="@(() => NavigationStateService.NavigateTo($"/edit/{Agent.Id}"))"><i class="fa-solid fa-pencil"></i></button>
        }
        @if (AuthStateService.IsAdmin() && AuthStateService?.currentUser?.AgencyId == Agent?.Agency.Id && AuthStateService?.currentUser?.AgentId != Agent?.Id || AuthStateService.IsSuperAdmin() && AuthStateService?.currentUser?.AgentId != Agent?.Id)
        {
            <button class="btn btn-danger btn-sm mt-3 mb-3" @onclick="() => DeleteAgent(Agent.Id)"><i class="fa-regular fa-trash-can"></i></button>
        }
        @if (AuthStateService.IsLoggedIn() && AuthStateService?.currentUser?.AgentId == Agent?.Id && !AuthStateService.IsSuperAdmin())
        {
            <button class="btn btn-primary btn-sm mt-3 mb-3 ms-3" @onclick="@(() => NavigationStateService.NavigateTo($"/createresidence"))"><i class="fa-solid fa-plus"></i> Försäljningsobjekt</button>
        }
    </div>
    <div class="containerCenter" style="flex-direction: row">
        @if (Agent != null && Residences != null)
        {
            @foreach (var residence in Residences.Where(r => r.Agent.Id == Agent.Id))
            {
                <ResidenceCardComponent residence="residence"></ResidenceCardComponent>
            }
        }
    </div>
}
else
{
    <ErrorMessage Message="Ingen agent att visa." />
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private Agent? Agent;
    private List<Residence>? Residences;
    private Residence? residence;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            Agent = await apiService.GetFromApiAsync<Agent>($"api/agent/{Id}");
            Residences = await apiService.GetAllFromApiAsync<Residence>();
        }
    }
    public async Task DeleteAgent(string id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort mäklaren?");
        if (isConfirmed)
        {
            var response = apiService.DeleteFromApiAsync<Agent>($"api/agent/{Id}", Agent);
            if (response != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Mäklaren har tagits bort.");
                NavigationStateService.NavigateBack();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ett fel uppstod: {id}");
            }
        }
    }
}