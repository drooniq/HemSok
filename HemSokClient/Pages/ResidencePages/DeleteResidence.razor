@inject NavigationManager navigationManager
@inject IAPIService apiService
@inject IAuthStateService AuthStateService
@inject INavigationStateService NavigationStateService
@page "/deleteresidence/{id}"
<PageTitle>Ta bort Bostad</PageTitle>
@* Author: Marcus Karlsson*@
@if (AuthStateService.IsLoggedIn())
{
    <h3style ="font-weight: 600; font-size:inherit; color: white;">Ta bort bostad!</h3style>

    <pstyle ="font-weight: 600; font-size:inherit; color: white;">Är du säker på att du vill ta bort denna bostad?</pstyle>
@if (residence != null)
{
    <EditForm Model="@residence">
        <button class="btn btn-danger" @onclick="DeleteResidences">Ta bort</button>
    </EditForm>
   
}
else
{
    <p>Bostaden kunde inte hittas.</p>
}
}
else
{
    <p>Du har inte spökenas tillåtelse att gå hit.</p>
}
@code {

    [Parameter]
    public string? Id { get; set; }

    private Residence? residence;

    private async Task DeleteResidences()
    {     
        // var post = await httpClient.DeleteAsync($"api/Residence/{residence.Id}");
        if (await apiService.DeleteFromApiAsync<Residence>("api/Residence/" + residence.Id, residence))
         {
            navigationManager.NavigateTo("/filterresidences");
         }
        // else
        // {

        // }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            residence = await apiService.GetFromApiAsync<Residence>("api/residence/" + Id);
        }
    }
}
