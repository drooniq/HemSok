@page "/register/{agencyid:int}"
@using System.ComponentModel.DataAnnotations;
@using System.Net.Http
@using System.Net.Http.Json
@using HemSokClient.Models.LoginModels
@using Microsoft.AspNetCore.Components.Forms
@inject INavigationStateService NavigationStateService
@inject IAPIService APIService
@inject IAuthStateService AuthStateService
@inject IJSRuntime JSRuntime

@* Author: Emil Waara *@
<style>
    .login-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255,255,255,0.1);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        padding: 20px;
        width: 400px;
    }

        .login-container form input[type="text"],
        .login-container form input[type="password"],
        .login-container form button {
            width: 100%;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #000;
            border-radius: 5px;
            box-sizing: border-box;
        }

    .content {
        position: relative;
        height: 500px;
        padding: 20px;
    }

    .validation-message {
        color: red;
    }
</style>

@if ((AuthStateService.IsAdmin() && (AuthStateService.currentUser.AgencyId == AgencyId)) || AuthStateService.IsSuperAdmin())
{
    <div class="content">
        <div class="login-container">
            <EditForm Model="@registerModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="login-header">
                    <img src="/images/ghost1.png" alt="Ghost" style="display: inline; width: 100px; height: 100px;" />
                    <h4 style="display:inline; color:white"><strong>Registrera ny mäklare</strong></h4>
                </div>

                <ValidationMessage For="@(() => registerModel.Email)" />
                <InputText type="text" @bind-Value="registerModel.Email" placeholder="Email" />

                <ValidationMessage For="@(() => registerModel.Password)" />
                <InputText type="password" @bind-Value="registerModel.Password" placeholder="Password" />

                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                <InputText type="password" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmation Password" />

                <ValidationMessage For="@(() => registerModel.Firstname)" />
                <InputText type="text" @bind-Value="registerModel.Firstname" placeholder="Firstname" />

                <ValidationMessage For="@(() => registerModel.Lastname)" />
                <InputText type="text" @bind-Value="registerModel.Lastname" placeholder="Lastname" />

                <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
                <InputText type="text" @bind-Value="registerModel.PhoneNumber" placeholder="Phonenumber" />

                @if (AuthStateService.IsSuperAdmin() || AuthStateService.IsAdmin())
                {
                    <InputSelect ValueChanged="@((string value)=>ChooseRole(value))" ValueExpression="@(()=>registerModel.Role)" Value="registerModel.Role" class="form-control" style="height: 2.7rem; margin-bottom: 15px">
                        <option value="">Välj mäklarens roll..</option>

                        @foreach (var role in Roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                }

                <button type="submit" class="btn btn-success">Registrera mäklaren</button>
                <button type="button" class="btn btn-primary" @onclick="ResetForm">Rensa formuläret</button>
                <button type="button" class="btn btn-danger" @onclick="Abort">Avbryt</button>
            </EditForm>
        </div>
    </div>
} else
{
    <ErrorMessage Message="Du har inte behörighet att komma åt denna sida." />
}


@code {
    [Parameter]
    public int AgencyId { get; set; }

    private RegisterModel registerModel = new RegisterModel();
    private List<Agency> Agencies = null;

    private List<string> Roles = new List<string> { UserRoles.Agent, UserRoles.Admin };

    protected override async Task OnInitializedAsync()
    {
        Agencies = await APIService.GetAllFromApiAsync<Agency>();
        AuthStateService.LoadCurrentUserFromLocalStorage();
    }

    private void ChooseRole(string Role)
    {
        registerModel.Role = Role;
    }

    private void ResetForm()
    {
        registerModel = new RegisterModel();
    }

    private void Abort()
    {
        NavigationStateService.NavigateBack();
    }

    private async Task HandleSubmit()
    {
        try

        {
            registerModel.AgencyId = AgencyId.ToString();
            if (!await APIService.RegisterAsync(registerModel))
            {
                // failed to register user.
                await JSRuntime.InvokeVoidAsync("alert", "Något gick fel.");
            }
            else
                await JSRuntime.InvokeVoidAsync("alert", "Mäklaren har skapats.");

            // Redirect to home page or another authorized page
            NavigationStateService.NavigateTo("/agencydetails/" + AgencyId);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Något gick fel: {ex.Message}");
            // Handle authentication errors
            // Display error message or perform other actions
            Console.WriteLine($"Authentication error: {ex.Message}");
        }
    }
}
