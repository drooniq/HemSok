@page "/register"
@using System.ComponentModel.DataAnnotations;
@using System.Net.Http
@using System.Net.Http.Json
@using HemSokClient.Models.LoginModels
@using Microsoft.AspNetCore.Components.Forms
@inject INavigationStateService NavigationStateService
@inject IAPIService APIService

@* Author: Emil Waara *@
 <style>
    body {
        width: 100vw;
        height: 100vh;
        background: linear-gradient(217deg, rgba(7, 9, 92, 1), rgba(123, 65, 161, 0) 70.71%), linear-gradient(127deg, rgba(160, 190, 235, 0.8), rgba(2, 19, 44, 0.8) 70.71%);
    }

    .login-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255,255,255,0.1);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        padding: 20px;
        width: 400px;
    }

        .login-container form input[type="text"],
        .login-container form input[type="password"],
        .login-container form button {
            width: 100%;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #000;
            border-radius: 5px;
            box-sizing: border-box;
        }

    .content {
        position: relative;
        height: 500px;
        padding: 20px;
    }

    .validation-message {
        color: red;
    }
</style>

<div class="content">
    <div class="login-container">
        <EditForm Model="@registerModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="login-header">
                <img src="/images/ghost1.png" alt="Ghost" style="display: inline; width: 100px; height: 100px;" />
                <h4 style="display:inline; color:white"><strong>Registrera ny mäklare</strong></h4>
            </div>

            <ValidationMessage For="@(() => registerModel.Email)" />
            <InputText type="text" @bind-Value="registerModel.Email" placeholder="Email" />
            
            <ValidationMessage For="@(() => registerModel.Password)" />
            <InputText type="password" @bind-Value="registerModel.Password" placeholder="Password" />

            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            <InputText type="password" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmation Password" />

            <ValidationMessage For="@(() => registerModel.Firstname)" />
            <InputText type="text" @bind-Value="registerModel.Firstname" placeholder="Firstname" />

            <ValidationMessage For="@(() => registerModel.Lastname)" />
            <InputText type="text" @bind-Value="registerModel.Lastname" placeholder="Lastname" />
                  

            <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
            <InputText type="text" @bind-Value="registerModel.PhoneNumber" placeholder="Phonenumber" />

            <button type="submit" class="btn btn-success">Registrera mäklaren</button>
            <button type="button" class="btn btn-primary" @onclick="ResetForm">Rensa formuläret</button>
            <button type="button" class="btn btn-danger" @onclick="Abort">Avbryt</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private List<Agency> Agencies = null;

    protected override async Task OnInitializedAsync()
    {
        Agencies = await APIService.GetAllFromApiAsync<Agency>();
    }

    private void ResetForm()
    {
        registerModel = new RegisterModel();
    }

    private void Abort()
    {
        NavigationStateService.NavigateBack();
    }

    private async Task HandleSubmit()
    {
        try
        {
            var adminAgent = APIService.Agents.First(s => s.Id == APIService.currentUser.AgentId);
            if(adminAgent== null)
            {
                ResetForm();
            }
            else
            {
                registerModel.agency = adminAgent.Agency.Id.ToString();
                if (!await APIService.RegisterAsync(registerModel))
                {
                    // failed to register user.
                }

                // Redirect to home page or another authorized page
                NavigationStateService.NavigateBack();
            }
           
        }
        catch (Exception ex)
        {
            // Handle authentication errors
            // Display error message or perform other actions
            Console.WriteLine($"Authentication error: {ex.Message}");
        }
    }
}
