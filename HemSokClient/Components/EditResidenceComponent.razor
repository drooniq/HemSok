@inject IAPIService apiService
@inject NavigationManager navigationManager
@inject IAuthStateService AuthStateService
@page "/editresidence/{id}"

@* Author: Marcus Karlsson*@
@if (AuthStateService.IsLoggedIn())
{
<h3>Fyll i all information om bostaden</h3>

<EditForm Model="@residence" OnValidSubmit="HandleFormSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <label for="StreetName">Address: </label>
    <InputText id="StreetName" @bind-Value="@residence.StreetName"></InputText>
    <br /> <br />
    <label for="City">Stad: </label>
    <InputText id="City" @bind-Value="@residence.City"></InputText>
    <br /> <br />
    <label for="ZipCode">Post Nummer: </label>
    <InputText id="ZipCode" @bind-Value="@residence.ZipCode"></InputText>
    <br />
    <label for="ListingPrice">Utgångspris: </label>
    <InputNumber id="ListingPrice" @bind-Value="@residence.ListingPrice"></InputNumber>
    <br /> <br />
    @if (apiService.Categories!=null)
    {
        <label>Välj Kategori: </label>
        <InputSelect @bind-Value="CategoryId">
            @foreach (var c in apiService.Categories)
            {
                <option value="@c.Id">@c.Name</option>
            }
        </InputSelect>
    }   
    <br /> <br />
    @if (apiService.Agents!=null)
    {
        <label>Välj Mäklare: </label>
        <InputSelect @bind-Value="AgentId">
            @foreach (var c in apiService.Agents)
            {
                <option value="@c.Id">@c.FirstName @c.LastName</option>
            }
        </InputSelect>
    } 
    <br /> <br />
    @if (apiService.Municipality!=null)
    {
        <label>Välj Kommun: </label>
        <InputSelect @bind-Value="MunicipalityId">
            @foreach (var c in apiService.Municipality.OrderBy(s => s.Name))
            {
                <option value="@c.Id">@c.Name</option>
            }
        </InputSelect>
    }  
    <br /> <br />
    <label for="Rooms">Antal Rum: </label>
    <InputNumber id="Rooms" @bind-Value="@residence.Rooms"></InputNumber>
    <br /> <br />
    <label for="ConstructionYear">Byggår: </label>
    <InputNumber id="ConstructionYear" @bind-Value="@residence.ConstructionYear"></InputNumber>
    <br /> <br />
    <label for="LivingArea">Boarea: </label>
    <InputNumber id="LivingArea" @bind-Value="@residence.LivingArea"></InputNumber>
    <br /> <br />
    <label for="BiArea">Biarea: </label>
    <InputNumber id="BiArea" @bind-Value="@residence.BiArea"></InputNumber>
    <br /> <br />
    <label for="PlotArea">Tomtarea: </label>
    <InputNumber id="PlotArea" @bind-Value="@residence.PlotArea"></InputNumber>
    <br /> <br />
    <label for="MonthlyFee">Månadskostnad: </label>
    <InputNumber id="MonthlyFee" @bind-Value="@residence.MonthlyFee"></InputNumber>
    <br /> <br />
    <label for="OperationCost">Driftkostnad: </label>
    <InputNumber id="OperationCost" @bind-Value="@residence.OperationCost"></InputNumber>
    <br /> <br />
    <label for="Description">Beskrivning: </label>
    <InputText id="Description" @bind-Value="@residence.Description"></InputText>
    <br /> <br />
    <CascadingValue Value="@residence">
        <AddImageComponent></AddImageComponent>
    </CascadingValue>
    <button type="submit">Submit</button>

    </EditForm>
}
else
{
    <p>Du har inte spökenas tillåtelse att gå hit.</p>
}


@code {

    [Parameter]
    public string? Id { get; set; }
    public Residence residence = new();
    public int CategoryId { get; set; }
    public string AgentId { get; set; }
    public int MunicipalityId { get; set; }

    private async Task HandleFormSubmit(EditContext context)
    {
        residence.Agent = apiService.Agents.FirstOrDefault(s => s.Id == AgentId);
        residence.Category = apiService.Categories.FirstOrDefault(s => s.Id == CategoryId);
        residence.Municipality = apiService.Municipality.FirstOrDefault(s => s.Id == MunicipalityId);

        // apiService.PostToApiAsync<Residence>(residence);

        if (await apiService.PutToApiAsync<Residence>(residence))
        {
            navigationManager.NavigateTo("/residence");
        }       

        //Redirecta till edit sida, för att fylla ut fullständig information!
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {      
            residence = await apiService.GetFromApiAsync<Residence>("api/residence/" + Id);     
        }
        apiService.Categories = await apiService.GetAllFromApiAsync<Category>();
        CategoryId = residence.Category.Id;

        apiService.Agents = await apiService.GetAllFromApiAsync<Agent>();
        AgentId = residence.Agent.Id;

        apiService.Municipality = await apiService.GetAllFromApiAsync<Municipality>();
        MunicipalityId = residence.Municipality.Id;
 
    }
}
