@page "/createagent"
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAPIService apiService

@* Author: Fredrik Blixt*@

<PageTitle>CreateAgent</PageTitle>

<h3>Lägg till ny mäklare</h3>

@if (Agencies != null)
{
    <EditForm Model="@Agent" OnValidSubmit="SaveAgent">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="firstName">Förnamn:</label>
            <InputText id="firstName" class="form-control" @bind-Value="Agent.FirstName" />
        </div>

        <div class="form-group">
            <label for="lastName">Efternamn:</label>
            <InputText id="lastName" class="form-control" @bind-Value="Agent.LastName" />
        </div>

        <div class="form-group">
            <label for="nickname">Smeknamn:</label>
            <InputText id="nickname" class="form-control" @bind-Value="Agent.Nickname" />
        </div>

        <div class="form-group">
            <label for="imagePath">Bildens sökväg:</label>
            <InputText id="imagePath" class="form-control" @bind-Value="Agent.ImagePath" />
        </div>

        <div class="form-group">
            <label for="agency">Mäklarfirma:</label>
            <InputSelect id="agency" class="form-control" @bind-Value="AgencyId">
                @foreach (var agency in Agencies)
                {
                    <option value="@agency.Id">@agency.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary" style="margin-top: 1rem">Spara</button>
        <button @onclick="@(() => NavigationManager.NavigateTo("/agent"))" class="btn btn-primary" style="margin-top: 1rem">Avbryt</button>
    </EditForm>  
}
else
{
    <p>Mäklarna kommer vid midnatt</p>
}

@code {
    private Agent? Agent;
    private Agency? Agency = new();
    private List<Agency>? Agencies;
    private int AgencyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Agencies = await apiService.GetAllFromApiAsync<Agency>();
            AgencyId = Agencies[0].Id;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ett undantag inträffade: {ex.Message}");
        }
    }

    private async Task SaveAgent(EditContext editContext)
    {
        if (Agent != null && Agencies != null)
        {
            Agent.Agency = Agencies.FirstOrDefault(s => s.Id == AgencyId) ?? new Agency();
            // HttpResponseMessage response = await httpClient.PostAsJsonAsync("api/agent", Agent);
            var response = apiService.PostToApiAsync<Agent>(Agent);
            if (response != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Mäklaren är tillagd.");
                NavigationManager.NavigateTo("/agent");
            }
        }
    }
}
