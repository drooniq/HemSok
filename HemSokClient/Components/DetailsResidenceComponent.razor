@inject NavigationManager NavigationManager
@inject IAPIService apiService
@inject IAuthStateService AuthStateService

@* Author: Marcus Karlsson*@

@page "/residencedetails/{id}"
<style>
    .card {
        width: 65rem;
        height: 120rem;
        margin: 1rem;
        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.8);
        border: 1px solid black;
        transition: 0.3s ease;
    }
</style>

@if (residence != null)
{
     <div class="card">
    <div class="piccontainer">       
        <div class="pictureSlider">
            <CascadingValue Value="@residence.ImagePaths">
                <ImagesDisplayComponent></ImagesDisplayComponent>
            </CascadingValue>
        </div>
        <div class="agentinfo">
            <h3>Ansvarig mäklare</h3>
            <div class="detailstop">
                <div class="infotext">
                    <p style="font-weight: 500; font-size:larger;">@residence.Agent.FirstName @residence.Agent.LastName</p>
                    <p >@residence.Agent.PhoneNumber</p>
                    <p >@residence.Agent.Email</p>
                    <p style="font-weight: 500;">@residence.Agent.Agency.Name</p>
                </div>
            <div class="infopics">
                
                    <img src="@residence.Agent.ImagePath" alt="Bild" class="agentPicDetails" />
                
                    <img src="@residence.Agent.Agency.ImagePath" alt="Bild" class="AgencypicDetails" />
               
                    <br /> <br />
                    @if(AuthStateService.IsLoggedIn())
                    {
                            @if (residence.Agent.Id == currentAgent?.Id ||
                                 AuthStateService.currentUser?.Role == UserRoles.SuperAdmin)
                            {
                                <button class="btn btn-primary" @onclick="()=>GoToEditResidence(residence.Id)">Redigera</button>
                                <br />  <br />
                                <button class="btn btn-danger" @onclick="()=>GoToDeleteResidence(residence.Id)">Ta bort</button>
                                <br />
                                <br />
                            }     
                    }            
            </div>
        </div>
        </div>
        <div class="detailsbottom"></div>
    </div>

    <div class="containerdetails">
        <div class="detailsleft"></div>
        <div class="detailsright">
            <div class="detailstop">
                <div class="detailstop-left">
                    <h3>@residence.StreetName</h3>
                    <p>@residence.City, @residence.Municipality.Name Kommun </p>
                </div>
                <div class="detailstop-right">
                    <h4>@residence.ListingPrice SEK</h4>
                    <p>Utgångspris</p>
                </div>
            </div>
            <div class="detailsbottom">
                <div class="detailsbottom-left">
                    <p>@residence.Description</p>
                </div>
                <div class="detailsbottom-right">
                    <p>Bostadstyp:&nbsp; @residence.Category.Name</p>
                    <p>Antal rum:&nbsp; @residence.Rooms</p>
                    <p>Byggår:&nbsp;  @residence.ConstructionYear</p>
                    <p>Boarea:&nbsp; @residence.LivingArea kvm</p>
                    <p>Biarea:&nbsp; @residence.BiArea kvm</p>
                    <p>Tomtarea:&nbsp; @residence.PlotArea kvm</p>
                    <p>Månadskostnad:&nbsp; @residence.MonthlyFee kr</p>
                    <p>Driftkostnad:&nbsp; årligen @residence.OperationCost kr</p>
                </div>
            </div>
        </div>
    </div>
    </div>
}
else
{
    <p>Bostaden kunde inte hittas.</p>
}
   
@code {

    [Parameter]
    public string? Id { get; set; }
    private Residence residence = new();
    private Agent currentAgent = new();

    private void GoToDeleteResidence(int id)
    {
        NavigationManager.NavigateTo($"/deleteresidence/{id.ToString()}");
    }

    private void GoToEditResidence(int id)
    {
        NavigationManager.NavigateTo($"/editresidence/{id.ToString()}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            residence = await apiService.GetFromApiAsync<Residence>("api/residence/" + Id);
            if(AuthStateService.currentUser !=null)
            currentAgent = await apiService.GetFromApiAsync<Agent>("api/agent/" + AuthStateService.currentUser.AgentId);
        }
    }
}
