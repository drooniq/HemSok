@page "/login"
@using System.ComponentModel.DataAnnotations;
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

<style>
    body {
        width: 100vw;
        height: 100vh;
        background: linear-gradient(217deg, rgba(7, 9, 92, 1), rgba(123, 65, 161, 0) 70.71%), linear-gradient(127deg, rgba(160, 190, 235, 0.8), rgba(2, 19, 44, 0.8) 70.71%);
    }

    .login-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255,255,255,0.1);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        padding: 20px;
        width: 300px;
    }

        .login-container form input[type="text"],
        .login-container form input[type="password"],
        .login-container form button {
            width: 100%;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #000;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .login-container form button {
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
        }

            .login-container form button:hover {
                background-color: #45a049;
            }

    .content {
        position: relative;
        height: 500px;
        padding: 20px;
    }

    .validation-message {
        color: greenyellow;
        padding-bottom: 10px;
    }
</style>

<div class="content">
    <div class="login-container">
        <EditForm Model="@loginModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <h2 style="color: white;"><strong>Login</strong></h2>

            <ValidationMessage For="@(() => loginModel.Email)" />
                <InputText type="text" @bind-Value="loginModel.Email" placeholder="Email" />

            <ValidationMessage For="@(() => loginModel.Password)" />
                <InputText type="password" @bind-Value="loginModel.Password" placeholder="Password" />

            <ValidationMessage For="@(() => loginModel.ConfirmPassword)" />
                <InputText type="password" @bind-Value="loginModel.ConfirmPassword" placeholder="Confirm Password" />

            <button type="submit">Login</button>
            <button type="button" @onclick="Reset">Reset</button>
        </EditForm>
    </div>
</div>


@code {
    private LoginModel loginModel = new LoginModel();

    private void Reset()
    {
        loginModel = new LoginModel();
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Assuming you have a service to handle authentication
            //var token = await authService.Authenticate(loginModel);

            // Store token in local storage or session storage
            //await localStorage.SetItemAsync("authToken", token);

            // Redirect to home page or another authorized page
            //NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            // Handle authentication errors
            // Display error message or perform other actions
            Console.WriteLine($"Authentication error: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirmation Password is required")]
        public string ConfirmPassword { get; set; }
    }
}
