@inject IAPIService APIService
@inject IAuthStateService AuthStateService
@inject INavigationStateService NavigationStateService

<style>
    .card-header {
        display: flex;
        align-items: center;
    }

    .card-header-left {
        flex: 1;
        padding-left: 10px;
    }

    .card-header-right img {
        height: 3rem;
        border-radius: 5px;
        margin-right: 15px;
    }

    .card-footer {
        align-items: center;
        padding: 0.5rem;
        background-color: rgb(27, 29, 42);
    }

    .card-footer-left {
    }

    .card-footer-right {
        display: flex;
        flex: 1;
        justify-content: right;
    }

    .card-footer a {
        margin-left: 5px;
    }

    .card-footer-left, .card-footer-left a {
        text-decoration: none;
        color: white;
    }

    .card-body {
        flex-direction: column; 
        justify-content: center; 
        align-items: center; 
        text-align: center; 
    }

    .card-body-top {
        height: 2.5rem;
        margin: 0px;
        padding: 0px;
    }

    .card-body-bottom {
        flex: 1;
    }
</style>

@if(agency != null)
{
    <div class="card" onclick="@GoDetails" style="width: 34rem; height: 17rem">

        <div class="card-header card-dark" style="height: 5rem;">
            <div class="card-header-left">
                <h3>
                    @agency.Name<br/>
                </h3>
            </div>

            <div class="card-header-right">
                <img src="@agency.ImagePath" alt="..." />
            </div>
        </div>

        <div class="card-body card-light-transparent">
            <div class="card-body-top">
                <h3 style="text-align: center; font-weight: 900; margin: 0; padding: 0; margin-bottom: 0.5rem;">
                    @agency.PhoneNumber
                </h3>
            </div>
            <div class="card-body-bottom">
                <h5>
                    @agency.Description
                </h5>
            </div>
        </div>

        <div class="card-footer card-dark">
            <div class="card-footer-left">
                <a href="@agency.Website"><i class="fa-solid fa-globe"></i></a>
                <a href="mailto: @agency.Email"><i class="fa-regular fa-envelope"></i></a>
            </div>

            <div class="card-footer-right">
                @if (ShowCrud)
                {
                    @if (AuthStateService.IsSuperAdmin() || (AuthStateService.IsAdmin() && AuthStateService.currentUser?.AgencyId == agency?.Id))
                    {
                        <a class="btn btn-primary" @onclick="@(e => NavigateToPage("/editagency/" + agency.Id))"><i class="fa-solid fa-pen-to-square"></i></a>
                    }

                    <a class="btn btn-secondary" @onclick="@(e => NavigateToPage("/agencydetails/" + agency.Id))"><i class="fa-solid fa-circle-info"></i></a>

                    @if (AuthStateService.IsSuperAdmin())
                    {
                        <a class="btn btn-danger" @onclick="@(e => NavigateToPage("/agencydelete/" + agency.Id))"><i class="fa-solid fa-trash-can"></i></a>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int AgencyId { get; set; }
    [Parameter]
    public bool ShowCrud { get; set; } = true;

    private Agency? agency;
    private Agent? agent;

    protected override async Task OnInitializedAsync()
    {
        agency = await APIService.GetFromApiAsync<Agency>("/api/agency/" + AgencyId);
        GetAgent();
    }

    public void GoDetails()
    {
        NavigationStateService.NavigateTo("/agencydetails/" + agency?.Id);
    }

    private async Task GetAgent()
    {
        agent = await APIService.GetFromApiAsync<Agent>("/api/agent/" + AuthStateService.currentUser?.AgentId);
    }

    private bool IsValidAdmin()
    {
        return (agent?.Agency.Id == AgencyId);
    }

    private void NavigateToPage(string page)
    {
        NavigationStateService.NavigateTo(page);
    }
}