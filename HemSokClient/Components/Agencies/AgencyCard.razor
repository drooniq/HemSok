@inject IAPIService APIService
@inject IAuthStateService AuthStateService
@inject INavigationStateService NavigationStateService

<style>
    .card {
        width: 30rem;
        height: 20rem;
        margin: 1rem;
        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.8);
        border: 1px solid black;
        transition: 0.3s ease;
        color: black;
        font-family: Arial, Helvetica, sans-serif;
        background-color: rgba(255, 255, 255, 0.6);
        border-radius: 15px;
        overflow: hidden;
        cursor: pointer;
    }

    .card:hover {
        transform: translateY(-15px);
        box-shadow: 0 16px 32px 0 rgba(0, 0, 0, 0.6);
    }

    .card-body {
        padding: 0.5rem;
    }

    .card-footer {
        padding: 0.5rem;
        display: flex;
        justify-content: right;
        align-items: right;
        background-color: rgb(27, 29, 42);
        border-bottom-left-radius: 15px; 
        border-bottom-right-radius: 15px; 
    }

        .card-footer a {
            margin-left: 5px;
        }

    .card-title {
        padding: 0px;
        margin: 0px;
        display: flex;
    }

    .card-title-left, .card-title-left h5 {
        display: flex;
        justify-content: center;
        align-items: center;
        flex: 1;
        font-size: x-large;
        font-weight: 800;
        padding: 5px;
        height: 4rem;
    }

    .card-title-right {
        height: 4 rem;
        display: flex;
        align-items: center;
    }

    .card-title-right img {
        border-radius: 3px;
    }

    .card-image-top {
        max-height: 3rem;
    }
    
    .card-text {
        margin-top: 1rem;
    }

    .card-text h3, h4, h5 {
        margin: 0px;
        padding: 0px;
    }

    .card-text p {
        margin-top: 0.5rem;
    }

    .card-text a {
        color: darkblue;
        text-decoration: none;
    }

    .card-text a:hover {
        color: lightblue;
    }
</style>

@if(agency != null)
{
    <div class="card" onclick="@GoDetails">
        <div class="card-body">
            <div class="card-title">
                <div class="card-title-left">
                    <h5>
                        @agency.Name
                    </h5>
                </div>
                <div class="card-title-right">
                    <img src="@agency.ImagePath" alt="..." class="card-image-top" />
                </div>
            </div>
            <div class="card-text">
                <h3 style="text-align: center; font-weight: 900; margin: 0; padding: 0; margin-bottom: 0.5rem;">
                    @agency.PhoneNumber
                </h3>
                <h5 style="text-align: center;">
                    <a><i class="fa-solid fa-globe"></i> @agency.Website</a>
                </h5>
                <h5 style="text-align: center;">
                    <a style="text-decoration: none;" href="mailto: @agency.Email"><i class="fa-regular fa-envelope"></i>  @agency.Email</a>
                </h5>
                <p>
                    @agency.Description
                </p>
            </div>
        </div>
        <div class="card-footer">
            @if (AuthStateService.IsSuperAdmin() || AuthStateService.IsAdmin())
            {
                <a class="btn btn-primary" @onclick="@(e => NavigateToPage("/agencyedit/" + agency.Id))">Edit</a>
            }

            <a class="btn btn-secondary" @onclick="@(e => NavigateToPage("/agencydetails/" + agency.Id))">Details</a>

            @if (AuthStateService.IsSuperAdmin())
            {
                <a class="btn btn-danger" @onclick="@(e => NavigateToPage("/agencydelete/" + agency.Id))">Delete</a>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int AgencyId { get; set; }

    private Agency? agency;
    private Agent? agent;

    protected override async Task OnInitializedAsync()
    {
        agency = await APIService.GetFromApiAsync<Agency>("/api/agency/" + AgencyId);
        GetAgent();
    }

    public void GoDetails()
    {
        NavigationStateService.NavigateTo("/agencydetails/" + agency?.Id);
    }

    private async Task GetAgent()
    {
        agent = await APIService.GetFromApiAsync<Agent>("/api/agent/" + AuthStateService.currentUser?.AgentId);
    }

    private bool IsValidAdmin()
    {
        return (agent?.Agency.Id == AgencyId);
    }

    private void NavigateToPage(string page)
    {
        NavigationStateService.NavigateTo(page);
    }
}