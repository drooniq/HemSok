@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject NavigationManager navigationManager
@inject IAPIService apiService

@* Author: Marcus Karlsson*@

@page "/createresidence"
<h3>Fyll i nyckel informationen</h3>


<EditForm Model="@residence" OnValidSubmit="HandleFormSubmit">
<DataAnnotationsValidator></DataAnnotationsValidator>
<ValidationSummary></ValidationSummary>
<label for="StreetName">Address: </label>
<InputText id="StreetName" @bind-Value="@residence.StreetName"></InputText>
<br />
<label for="City">Stad: </label>
<InputText id="City" @bind-Value="@residence.City"></InputText>
<br />
<label for="ZipCode">Post Nummer: </label>
<InputText id="ZipCode" @bind-Value="@residence.ZipCode"></InputText>
    <br />
<label for="ListingPrice">Utgångspris: </label>
 <InputNumber id="ListingPrice" @bind-Value="@residence.ListingPrice"></InputNumber>
    <br />
    @if (apiService.Categories != null)
    {<label>Välj Kategori: </label>
      <InputSelect @bind-Value="CategoryId">
        @foreach (var c in apiService.Categories)
        {<option value="@c.Id">@c.Name</option>}
        </InputSelect>
    }
    <br />
    @if (apiService.Agents != null)
    {<label>Välj Mäklare: </label>
      <InputSelect @bind-Value="AgentId">
        @foreach (var c in apiService.Agents)
        {<option value="@c.Id">@c.FirstName @c.LastName</option>}
      </InputSelect>
    }
    <br />
    @if (apiService.Municipality != null)
    {<label>Välj Kommun: </label>
     <InputSelect @bind-Value="MunicipalityId">
      @foreach (var c in apiService.Municipality.OrderBy(s=>s.Name))
       {<option value="@c.Id">@c.Name</option>}
     </InputSelect>
    }
    <button type="submit">Submit</button>

</EditForm>




@code {

    public Residence residence = new();
    public int CategoryId{ get; set; }
    public string AgentId { get; set; }
    public int MunicipalityId { get; set; }
   

    private async Task HandleFormSubmit(EditContext context)
    {              
        residence.Agent = apiService.Agents.FirstOrDefault(s => s.Id == AgentId);
        residence.Category = apiService.Categories.FirstOrDefault(s => s.Id == CategoryId);
        residence.Municipality = apiService.Municipality.FirstOrDefault(s => s.Id == MunicipalityId);
      
        if (await apiService.PostToApiAsync<Residence>(residence))
        {
            navigationManager.NavigateTo("/residence");
        }     
        //Redirecta till edit sida, för att fylla ut fullständig information!
    }

    protected override async Task OnInitializedAsync()
    {      
       
        apiService.Categories = await apiService.GetAllFromApiAsync<Category>();
        CategoryId = apiService.Categories[0].Id;

        apiService.Agents = await apiService.GetAllFromApiAsync<Agent>();
        AgentId = apiService.Agents[0].Id;

        apiService.Municipality = await apiService.GetAllFromApiAsync<Municipality>();
        MunicipalityId = apiService.Municipality[0].Id;
    }

  
}
