@inject NavigationManager NavigationManager
@inject IAuthStateService AuthStateService

@if (Agent != null)
{
    <div class="card m-3 rounded">
        <div class="card-img">
            <div class="img-container">
                <img src="@Agent.ImagePath" alt="Profilbild" class="m-1" />
            </div>
        </div>
        <div class="card-body">
            <div class="card-title text-center">
                <h5 class="mt-1">@Agent.FirstName @Agent.LastName</h5>
                <p class ="mb-1">"@Agent.Nickname"</p>
                @if (NavigationManager.Uri.Contains("detailsagent"))
                {
                    <p><a href="mailto:@Agent.Email">@Agent.Email</a></p>
                    <div class="phone-section">
                        <i class="fas fa-phone-alt"></i>
                        <p>@Agent.PhoneNumber</p>
                    </div>
                }
                else if (NavigationManager.Uri.Contains("/agent"))
                {
                    <small class="text-muted">@Residences?.Count(r => r.Agent.Id == Agent.Id) objekt till salu</small>
                }
                else
                {
                    <img src="~/icon-192.png" alt="No info" style="max-height:fit-content" ; />
                }
            </div>
        </div>
        <div class="card-footer">
            <div class="left-footer">
                <small class="text-muted">@Agent.Agency.Name</small>
            </div>
            <div class="right-footer">
                <img src="@Agent.Agency.ImagePath" alt="Logotyp" class="card-footer-image" />
            </div>
        </div>
    </div>
}
else
{
    <ErrorMessage Message="Mäklarna kommer vid midnatt"/>
}

@code {
    [Parameter]
    public Agent? Agent { get; set; }
    [Parameter]
    public List<Residence>? Residences { get; set; }
}
<style>
    body {
        width: 100vw;
        height: 100vh;
        background: linear-gradient(217deg, rgba(7, 9, 92, 1), rgba(123, 65, 161, 0) 70.71%), linear-gradient(127deg, rgba(160, 190, 235, 0.8), rgba(2, 19, 44, 0.8) 70.71%);
    }

    .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: normal;

    }

    .card {
        width: 18rem;
        height: 22rem;
        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.8);
        border: 1px solid black;
        transition: 0.3s ease;
        cursor: pointer;
        overflow: hidden;
        background: linear-gradient(217deg, rgba(135, 206, 250, 0.8), rgba(173, 216, 230, 0.8) 70.71%), linear-gradient(127deg, rgba(173, 216, 230, 0), rgba(255, 255, 255, 0.9) 70.71%);
    }

        .card:hover {
            transform: translateY(-15px);
            box-shadow: 0 16px 32px 0 rgba(0, 0, 0, 0.6);
        }

    .card-body {
        padding: 0.5rem;
        height: 35%;
        overflow: auto;
    }

    .card-footer {
        background-color: rgba(200,200,200,0.7);
        padding: 0.5rem;
        display: flex;
        align-items: center;
        height: 15%;
    }

    .card-footer-image {
        max-height: 2rem;
        max-width: 4rem;
        display: inline;
    }

    .left-footer {
        padding: 0px;
        flex: 1;
    }

    .right-footer {
        padding: 0px;
        max-width: 4rem;
    }

    .card-title {
        display: flex;
        flex-direction: column;
    }

    .card-title-left {
        flex: 1;
    }

    .card-img {
        height: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .img-container {
        width: auto;
        height: 90%;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .img-container img {
            width: auto;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

    .phone-section {
        display: flex;
        justify-content: center;
    }

        .phone-section i {
            margin-right: 5px;
        }

</style>