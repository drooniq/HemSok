@page "/editagent/{id}"
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAPIService apiService

@* Author: Fredrik Blixt*@

<PageTitle>Edit Agent</PageTitle>

<h3>Redigera mäklare</h3>

@if (Agent != null && Agencies != null)
{
    <EditForm Model="@Agent" OnValidSubmit="SaveAgent">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="firstName">Förnamn:</label>
            <InputText id="firstName" class="form-control" @bind-Value="Agent.FirstName" />
        </div>

        <div class="form-group">
            <label for="lastName">Efternamn:</label>
            <InputText id="lastName" class="form-control" @bind-Value="Agent.LastName" />
        </div>

        <div class="form-group">
            <label for="nickname">Smeknamn:</label>
            <InputText id="nickname" class="form-control" @bind-Value="Agent.Nickname" />
        </div>

        <div class="form-group">
            <label for="imagePath">Bildens sökväg:</label>
            <InputText id="imagePath" class="form-control" @bind-Value="Agent.ImagePath" />
        </div>

        <div class="form-group">
            <label for="agency">Mäklarfirma:</label>
            <InputSelect id="agency" class="form-control" @bind-Value="AgencyId">
                @foreach (var agency in Agencies)
                {
                    <option value="@agency.Id" >@agency.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary" style="margin-top: 1rem">Spara</button>
    </EditForm>
}
else
{
    <p>Väntar på tolvslaget...</p>
}
<button @onclick="@(() => NavigationManager.NavigateTo($"/detailsagent/{Id}"))" class="btn btn-primary" style="margin-top: 1rem">Ångra</button>
@code {
    [Parameter]
    public string? Id { get; set; }

    private Agent? Agent;
    private List<Agency>? Agencies;
    private int AgencyId;

    private bool IsAgencySelected(int agencyId)
    {
        return Agent.Agency != null && Agent.Agency.Id == agencyId;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Agent = await apiService.GetFromApiAsync<Agent>($"api/agent/{Id}");
            Agencies = await apiService.GetAllFromApiAsync<Agency>();
            AgencyId = Agent.Agency.Id;
            // var response = await httpClient.GetAsync($"api/agent/{Id}");
            // if (response.IsSuccessStatusCode)
            // {
            //     Agent = await response.Content.ReadFromJsonAsync<Agent>();
            // }

            // response = await httpClient.GetAsync("api/agency");
            // if (response.IsSuccessStatusCode)
            // {
            //     Agencies = await response.Content.ReadFromJsonAsync<List<Agency>>();
            //     AgencyId = Agent.Agency.Id;
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett undantag inträffade: {ex.Message}");
        }
    }

    private async Task SaveAgent(EditContext editContext)
    {
        Agent.Agency = Agencies.FirstOrDefault(a => a.Id == AgencyId);
        // HttpResponseMessage response = await httpClient.PutAsJsonAsync($"api/agent/{Id}", Agent);
        // if (response.IsSuccessStatusCode)
        var response = await apiService.PutToApiAsync<Agent>(Agent);
        if (response != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Mäklaren är uppdaterad.");
            NavigationManager.NavigateTo("/agent");
        }
    }

    // private void GoBack()
    // {
    //     NavigationManager.NavigateTo($"/detailsagent/{Id}");
    // }
}

