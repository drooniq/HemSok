@page "/starting5"
@using System.ComponentModel.DataAnnotations
@inject IAPIService APIService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Residences != null && Residences.Any())
{
    <div class="container">
        <div class="image-container">
            <button class="arrow left" @onclick="PreviousResidence">❮</button>
            <a @onclick="@(() => NavigationManager.NavigateTo($"/residencedetails/{Residences?[CurrentResidenceIndex].Id}"))">
                <img id="startPic" src="@Residences?[CurrentResidenceIndex].ImagePaths?.FirstOrDefault()" alt="Residence Image" class="img-fluid" style="cursor:pointer;" />
            </a>
            <button class="arrow right" @onclick="NextResidence">❯</button>
            @* <div class="info-container">
                <p><span id="address">Residences?[CurrentResidenceIndex].StreetName </span></p>
            </div>
            <div class="prize-container">
                <p><span id="prize">Residences?[CurrentResidenceIndex].ListingPrice kr</span></p>
            </div>
            <div class="description-container">
                <p><span id="description">Residences?[CurrentResidenceIndex].Description</span></p>
            </div> *@
        </div>
    </div>
}
else
{
    <p>Husen hemsöks just nu, försök igen senare!</p>
}
@code {
    [Parameter]
    public int numberOfObjects { get; set; }

    private List<Residence>? Residences;
    private int CurrentResidenceIndex = 0;
    private Timer? tempo;
    private int Id;


    protected override async Task OnInitializedAsync()
    {
        tempo = new Timer(PicIndex, null, 5000, 5000);
        try
        {
            Residences = (await APIService.GetAllFromApiAsync<Residence>()).TakeLast(numberOfObjects).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ett undantag inträffade: {ex.Message}");
        }
    }
    private void PicIndex(object? state)
    {
        CurrentResidenceIndex = (CurrentResidenceIndex + 1) % Residences.Count;
        StateHasChanged();
    }
    public void Dispose()
    {
        tempo?.Dispose();
    }

    private void NextResidence()
    {
        CurrentResidenceIndex = (CurrentResidenceIndex + 1) % Residences.Count;
    }

    private void PreviousResidence()
    {
        CurrentResidenceIndex = (CurrentResidenceIndex - 1 + Residences.Count) % Residences.Count;
    }

}

<style>

    #startPic {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .container {
        display: block;
        width: 50%;
        height: auto;
        float: left;
        clear: both;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 20vh;
    }

    .arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2em;
        color: white;
        background: rgba(0, 0, 0, 0.5);
        border: none;
    }

        .arrow.left {
            left: 0.2rem;
        }

        .arrow.right {
            right: 0.2rem;
        }

    .info-container {
        bottom: 15%;
        left: 1%;
        max-width: 50%;
    }

    .prize-container {
        bottom: 15%;
        right: 1%;
        max-width: 50%;
    }

    .description-container {
        bottom: 1%;
        left: 1%;
        max-width: 100%;
        overflow-wrap: break-word;
    }

    .info-container, .prize-container, .description-container {
        position: absolute;
        color: white;
        font-size: 1vw;
        padding: 1px;
        font-weight: bolder;
        line-height: 1.0;
        text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
    }
    /* Media query for screens smaller than 600px */
    media (max-width: 600px) {
        .info-container, .description-container {
            width: 100%;
        }

    }
</style>
