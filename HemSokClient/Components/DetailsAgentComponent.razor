@page "/detailsagent/{id}"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAPIService apiService

@* Author: Fredrik Blixt*@

<PageTitle>DetailsAgent</PageTitle>
<div class="container justify-content-center">
    @if (Agent != null)
    {
        <AgentCardComponent Agent="Agent" Residences="Residences" />


    }
    else
    {
        <p>Mäklaren kunde inte hittas.</p>
    }
</div>
<div class="container justify-content-center">
    <button class="btn btn-primary btn-sm m-3 " @onclick="@(() => NavigationManager.NavigateTo("/agent"))">Tillbaka till mäklare</button>
    <button class="btn btn-primary btn-sm mt-3 mb-3 me-1" @onclick="@(() => NavigationManager.NavigateTo($"/edit/{Agent.Id}"))"><i class="fa-solid fa-pencil"></i></button>
    <button class="btn btn-danger btn-sm mt-3 mb-3" @onclick="() => DeleteAgent(Agent.Id)"><i class="fa-regular fa-trash-can"></i></button>
</div>
<div class="container justify-content-center">
    @if (Agent != null && Residences != null)
    {
        @foreach (var residence in Residences.Where(r => r.Agent.Id == Agent.Id))
        {

            <ResidenceCardComponent residence="residence" />



        }
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    private Agent? Agent;
    private List<Residence>? Residences;
    private Residence? residence;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            Agent = await apiService.GetFromApiAsync<Agent>($"api/agent/{Id}");
            Residences = await apiService.GetAllFromApiAsync<Residence>();
        }
    }
    public async Task DeleteAgent(string id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort mäklaren?");
        if (isConfirmed)
        {
            var response = apiService.DeleteFromApiAsync<Agent>($"api/agent/{Id}", Agent);
            if (response != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Mäklaren har tagits bort.");
                NavigationManager.NavigateTo("/agent");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ett fel uppstod: {id}");
            }
        }
    }
}