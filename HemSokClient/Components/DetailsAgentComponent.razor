@page "/detailsagent/{id}"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAPIService apiService

@* Author: Fredrik Blixt*@

<PageTitle>DetailsAgent</PageTitle>
@if (Agent != null)
{
    <div class="row mt-5 mb-5 d-flex justify-content-center align-items-end shadow rounded" style="width: 80%;">

        <div class="col-md-3 " style="height: inherit;">
            <img src="@(string.IsNullOrEmpty(Agent.ImagePath) ?
                    (string.IsNullOrEmpty(Agent.Agency.ImagePath) ?
                    "images/ghost1.png" : Agent.Agency.ImagePath) : Agent.ImagePath)"
                    alt="Profilbild"
                    class="img-fluid m-2 shadow rounded"
                 style="height: 16vh;" />
        </div>
        <div class="col-md-3">
            <div class="card-body">
                <h5>@Agent.FirstName @Agent.LastName</h5>
                <p class="card-text">"@Agent.Nickname"</p>
                <div class="text-start">
                    <small class="text-muted">@Agent.Agency.Name</small>
                </div>

            </div>
        </div>
        <div class="col-md-3">
            <div class="card-body  ">
                <div class="text-center">
                    <small class="text-muted">@Residences?.Count(r => r.Agent.Id == Agent?.Id) objekt till salu</small>
                </div>
                <div class="d-flex justify-content-between align-items-center mt-3 ">
                    <img src="@(string.IsNullOrEmpty(Agent.Agency.ImagePath) ?
                            "gif/floatingghost.png" : Agent.Agency.ImagePath)"
                            alt="Mäklarfirma logga"
                            class="img-fluid"
                            style="height: 4rem;" />
                </div>
            </div>
        </div>
        <div class="col-md-3">
        <div class="d-flex justify-content-center align-items-center m-3 ">
            <small class="text-muted">@Agent.PhoneNumber Mobilnr.</small>
            </div>
            <div class="d-flex justify-content-center align-items-lg-baseline m-3 ">
                <a href="mailto:${@Agent.Email}">@Agent.Email</a>
            </div>
        </div>
        
    </div>
    
    @* <h3>@Agent.Nickname<img src="@Agent.ImagePath" alt="Profilbild" style="max-width: 7rem; border-radius: 10%; margin: 1rem;" /></h3>

    <table class="table ">
        <thead>
            <tr>
                <th>Förnamn</th>
                <th>Smeknamn</th>
                <th>Efternamn</th>
                <th>Mäklarfirma</th>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Agent.FirstName</td>
                <td>@Agent.Nickname</td>
                <td>@Agent.LastName</td>
                <td>@Agent.Agency.Name</td>
                <td><button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"/editagent/{Agent.Id}"))">Redigera</button></td>
                <td><button class="btn btn-primary" @onclick="() => DeleteAgent(Agent.Id)">Ta bort</button></td>
            </tr>
        </tbody>
    </table> *@
}
else
{
    <p>Mäklaren kunde inte hittas.</p>
}
<button class="btn btn-primary btn-sm mb-3 me-3" @onclick="@(() => NavigationManager.NavigateTo("/agent"))">Tillbaka till mäklare</button>
<button class="btn btn-primary btn-sm mb-3" @onclick="@(() => NavigationManager.NavigateTo($"/editagent/{Agent.Id}"))"><i class="fa-solid fa-pencil"></i></button>
<button class="btn btn-danger btn-sm mb-3" @onclick="() => DeleteAgent(Agent.Id)"><i class="fa-regular fa-trash-can"></i></button>

@if (Agent != null)
{
    <AgentResidencesComponent AgentId="@Agent.Id" />
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private Agent? Agent;
    private List<Residence>? Residences;
    

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            Agent = await apiService.GetFromApiAsync<Agent>($"api/agent/{Id}");
            Residences = await apiService.GetAllFromApiAsync<Residence>();
        }
    }
    public async Task DeleteAgent(string id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort mäklaren?");
        if (isConfirmed)
        {
            var response = apiService.DeleteFromApiAsync<Agent>($"api/agent/{Id}", Agent);
            if (response != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Mäklaren har tagits bort.");
                NavigationManager.NavigateTo("/agent");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ett fel uppstod: {id}");
            }
        }
    }
}