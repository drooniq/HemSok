@page "/residence"
@inject IAPIService apiService
@inject NavigationManager NavigationManager

@* Author: Marcus Karlsson *@

<h3>Dina Bostäder</h3>
<button class="btn btn-primary" @onclick="GoToCreateResidencePage">Lägg till ny bostad</button>

@if (Residences != null)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th></th>
                <th>Startpris</th>
                <th>Address</th>
                <th>Postnummer</th>
                <th>Stad</th>
                <th>Kategori</th>
                <th>Kommun</th>
                <th>Län</th>
                <th>Ansvarig mäklare</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var residence in Residences)
            {
                <tr class="row-hover" @onclick="() => GoToDetailsResidencePage(residence.Id)">
                    <td><img src="@residence.PrimaryImagePath" alt="..." style="max-width: 6rem; border-radius: 10%;" /></td>
                    @* @if (residence.ImagePaths != null && residence.ImagePaths.Count>0)
                    {
                        <td><img src="@residence.PrimaryImagePath" alt="..." style="max-width: 6rem; border-radius: 10%;" /></td>
                    } else
                    {
                        <td></td>
                    } *@
                    <td>@residence.ListingPrice</td>
                    <td>@residence.StreetName</td>
                    <td>@residence.ZipCode</td>
                    <td>@residence.City</td>
                    <td>@residence.Category.Name</td>
                    <td>@residence.Municipality.Name</td>
                    <td>@residence.Municipality.County.Name</td>
                    <td>@residence.Agent.FirstName @residence.Agent.LastName</td>                                    
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Husen hemsöks just nu, försök igen senare!</p>
}


@code {
    [Parameter]
    public List<Residence>? ListResidences { get; set; }

    private List<Residence>? Residences;

    // public List<Residence> residences;

    // public async Task GetHouses()
    // {       
    //     var response = await httpclient.GetAsync("api/Residence");      
    //     if (response.IsSuccessStatusCode)
    //     {
    //         residences = await response.Content.ReadFromJsonAsync<List<Residence>>();
    //     }
    //     else{ residences = null; }
    // }


    private void GoToDetailsResidencePage(int id)
    {       
        NavigationManager.NavigateTo($"/residencedetails/{id.ToString()}");
    }

    private void GoToCreateResidencePage()
    {
        NavigationManager.NavigateTo("/createresidence");
    }

    protected override async Task OnInitializedAsync()
    {
        if (ListResidences == null)
        {
            Residences = await apiService.GetAllFromApiAsync<Residence>();
        }
        else
        {
            Residences = ListResidences;
        }
        // try
        // {
        //     apiService.Residences = await apiService.GetAllFromApiAsync<Residence>();
        // }
        // catch(Exception e){
        //     Console.WriteLine(e.Message);
        // }
    }
}

