@inject IAPIService apiService
@inject NavigationManager NavigationManager

@* Author: Marcus Karlsson *@

<h3>FilterResidencesComponent</h3>

<h4>
    @if (stringOutput != "")
        @stringOutput

</h4>

<input class="form-control" placeholder="Sök bostad med address.."
       @bind="searchModel.StreetSearch" />
<br />
@if (apiService.Municipality != null)
{
    <label>Välj Kommun: </label>
    <InputSelect ValueChanged="@((string value)=>ChooseMun(value))" ValueExpression="@(()=>searchModel.MunSearch)" Value="searchModel.MunSearch">
        @if (searchModel.CountySearch != "")
        {
            <option value="">Sök på kommun...</option>
            @foreach (var c in apiService.Municipality.Where(s => s.County.Id == int.Parse(searchModel.CountySearch))
       .OrderBy(s => s.Name))
            {
                <option value="@c.Id">@c.Name</option>
            }
        }
        else
        {
            <option value="">Sök på kommun...</option>
            @foreach (var c in apiService.Municipality.OrderBy(s => s.Name))
            {
                <option value="@c.Id">@c.Name</option>
            }
        }
    </InputSelect>
}
<br />
<br />
@if (apiService.Counties != null)
{
    <label>Välj Län: </label>
    <InputSelect ValueChanged="@((string value)=>ChooseCounty(value))" ValueExpression="@(()=>searchModel.CountySearch)" Value="searchModel.CountySearch">
        @if (searchModel.MunSearch != "")
        {
            var mun = apiService.Municipality.FirstOrDefault(s => s.Id == int.Parse(searchModel.MunSearch));
            <option value=@apiService.Counties.FirstOrDefault(s =>s.Id == mun.County.Id)>
                @apiService.Counties.FirstOrDefault(s => s.Id == mun.County.Id).Name
            </option>
        }
        else
        {
            @if (searchModel.CountySearch != "")
            {
                <option value="@searchModel.CountySearch">
                    @apiService.Counties.First(s => s.Id == int.Parse(searchModel.CountySearch)).Name
                </option>
                <option value="">Nollställ filter</option>
            }
            else
            {
                <option value="">Sök på län...</option>
                @foreach (var c in apiService.Counties.OrderBy(s => s.Name))
                {
                    <option value="@c.Id">@c.Name</option>
                }
            }
        }
    </InputSelect>
    <br />
    <br />
}
<button class="form-control" @onclick="OnSearchClicked">
    Sök
</button>

@code
{
    [CascadingParameter]
    public IEnumerable<Residence> filteredResidences { get; set; }

    public IEnumerable<Residence> initResidences { get; set; }
    private SearchModel searchModel { get; set; } = new SearchModel();
    private string stringOutput { get; set; } = "";

    private void OnSearchClicked()
    {
        stringOutput = $"Sökning: {searchModel.StreetSearch}, {searchModel.MunSearch}, {searchModel.CountySearch}";

        if (filteredResidences != null && filteredResidences.Count() > 0)
        {
            stringOutput += $"\nAntal träffar: {filteredResidences.Count()}";
        }

        filteredResidences = initResidences;

        PrintFilteredResidences(filteredResidences);

        if (filteredResidences != null)
        {
            if (searchModel.MunSearch != "")
            {
                filteredResidences = filteredResidences.Where(s => s.Municipality.Id == int.Parse(searchModel.MunSearch));
                PrintFilteredResidences(filteredResidences);
            }
            else if (searchModel.CountySearch != "")
            {
                filteredResidences = filteredResidences.Where(s => s.Municipality.County.Id == int.Parse(searchModel.CountySearch));
                PrintFilteredResidences(filteredResidences);
            }

            if (searchModel.StreetSearch != "")
            {
                filteredResidences = filteredResidences.Where(s => s.StreetName.Contains(searchModel.StreetSearch));
                PrintFilteredResidences(filteredResidences);
            }
        }
    }

    private void PrintFilteredResidences(IEnumerable<Residence> residences)
    {
        if (residences != null)
        {
            Console.WriteLine("Filtered Residences:");
            foreach (var residence in residences)
            {
                Console.WriteLine($"Id: {residence.Id}, StreetName: {residence.StreetName}, City: {residence.City}, Municipality: {residence.Municipality?.Name ?? "Unknown"}, Municipality: {residence.Municipality.County?.Name ?? "Unknown"}");
            }
        }
        else
        {
            Console.WriteLine("Filtered Residences: null");
        }
    }

    private void ChooseMun(string munId)
    {
        searchModel.MunSearch = munId;
    }

    private void ChooseCounty(string countyId)
    {
        searchModel.CountySearch = countyId;
    }

    protected async override Task OnInitializedAsync()
    {
        apiService.Residences = await apiService.GetAllFromApiAsync<Residence>();
        apiService.Counties = await apiService.GetAllFromApiAsync<County>();
        apiService.Municipality = await apiService.GetAllFromApiAsync<Municipality>();
        initResidences = filteredResidences;
    }
}
