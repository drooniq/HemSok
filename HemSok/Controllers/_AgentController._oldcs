using HemSok.Data;
using HemSok.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860


/*
Author: Fredrik Blixt


namespace HemSok.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class _AgentController : ControllerBase
    {
        private readonly IRepository<Agent> agentRepo;
        private readonly IRepository<Agency> agencyRepo;

        public AgentController(IRepository<Agent> agentRepo, IRepository<Agency> agencyRepo)
        {
            this.agentRepo = agentRepo;
            this.agencyRepo = agencyRepo;
        }

        // GET: api/<AgentController>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Agent>>> GetAllAsync()
        {
            var agent = agentRepo.Queryable()
                .Include( a => a.Agency);
            return Ok(agent);
        }

        // GET api/<AgentController>/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Agent>> GetAsync(string id)
        {
            var agent = agentRepo.Queryable()
                .Include(a => a.Agency)
                .Where(a => a.Id == id);
            return Ok(agent);
        }

        // POST api/<AgentController>
        [HttpPost]
        public async Task<IActionResult> PostAsync([FromBody] Agent agent)
        {
            Agency agency = await agencyRepo.GetAsync(agent.Agency.Id);

            if (agency == null)
            {
                return NotFound("Agency not present.");
            }

            agencyRepo.Entry(agency, EntityState.Unchanged);

            Agent newAgent = new Agent()
            {
                FirstName = agent.FirstName,
                LastName = agent.LastName,
                Agency = agency
            };

            await agentRepo.AddAsync(newAgent);
            await agentRepo.SaveChangesAsync();
            return Ok(newAgent);
        }

        // PUT api/<AgentController>/5
        [HttpPut("{Guid}")]
        public IActionResult Put(string guid, [FromBody] Agent agent)
        {
            if (agent == null)
            {
                return NotFound();
            }
            agentRepo.Update(agent);
            agentRepo.SaveChangesAsync();
            return CreatedAtAction(nameof(GetAsync), new { id = agent.Id }, agent);
        }

        // DELETE api/<AgentController>/5
        [HttpDelete("{Guid}")]
        public async Task<IActionResult> Delete(string guid)
        {
            var agent = await agentRepo.GetAsync(guid);
            agentRepo.Delete(agent);
            await agentRepo.SaveChangesAsync();
            return NoContent();
        }
    }
}
*/